version: '3.8'

x-name: supabase

services:
  # Core Services
  db:
    container_name: supabase-db
    image: postgres:15.1-alpine
    restart: unless-stopped
    volumes:
      - ./volumes/db/data:/var/lib/postgresql/data
      - ./volumes/db/postgresql.conf:/etc/postgresql/postgresql.conf
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: postgres
    ports:
      - 5432:5432
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  vector:
    container_name: supabase-vector
    image: pgvector/pgvector:pg15
    restart: unless-stopped
    volumes:
      - ./volumes/db/data:/var/lib/postgresql/data
      - ./volumes/db/postgresql.conf:/etc/postgresql/postgresql.conf
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: postgres
    ports:
      - 5433:5432 # Using a different port to avoid conflict with db
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  # analytics: # Commented out due to image pull issues
  #   container_name: supabase-analytics
  #   image: supabase/analytics:latest # Corrected image
  #   restart: unless-stopped
  #   depends_on:
  #     db:
  #       condition: service_healthy
  #   environment:
  #     POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
  #     POSTGRES_DB: postgres
  #     POSTGRES_HOST: db
  #     POSTGRES_PORT: 5432
  #   ports:
  #     - 3001:3000 # Using a different port
  #   healthcheck:
  #     test: ["CMD", "curl", "-f", "http://localhost:3000/"]
  #     interval: 5s
  #     timeout: 5s
  #     retries: 5

  storage:
    container_name: supabase-storage
    image: supabase/storage-api:v0.40.4
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
    environment:
      ANON_KEY: ${ANON_KEY}
      SERVICE_ROLE_KEY: ${SERVICE_ROLE_KEY}
      POSTGREST_URL: http://rest:3000
      PGRST_JWT_SECRET: ${JWT_SECRET}
      DATABASE_URL: postgresql://supabase_storage_admin:${POSTGRES_PASSWORD}@db:5432/postgres
      FILE_SIZE_LIMIT: 52428800
      STORAGE_BACKEND: file
      FILE_STORAGE_BACKEND_PATH: /var/lib/storage
      TENANT_ID: 00000000-0000-0000-0000-000000000000
      REGION: auto
      GLOBAL_S3_BUCKET: storage
      ENABLE_IMAGE_TRANSFORMATION: "true"
      IMGPROXY_URL: http://imgproxy:5001
    volumes:
      - ./volumes/storage:/var/lib/storage
    ports:
      - 5000:5000
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:5000/status"]
      timeout: 5s
      interval: 5s
      retries: 3

  auth:
    container_name: supabase-auth
    image: supabase/gotrue:v2.132.3
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
    environment:
      GOTRUE_API_HOST: 0.0.0.0
      GOTRUE_API_PORT: 9999
      API_EXTERNAL_URL: ${API_EXTERNAL_URL}
      GOTRUE_DB_DRIVER: postgres
      GOTRUE_DB_DATABASE_URL: postgresql://supabase_auth_admin:${POSTGRES_PASSWORD}@db:5432/postgres
      GOTRUE_SITE_URL: ${SITE_URL}
      GOTRUE_URI_ALLOW_LIST: ${ADDITIONAL_REDIRECT_URLS}
      GOTRUE_DISABLE_SIGNUP: ${DISABLE_SIGNUP}
      GOTRUE_JWT_SECRET: ${JWT_SECRET}
      GOTRUE_JWT_EXP: ${JWT_EXPIRY}
      GOTRUE_JWT_DEFAULT_GROUP_NAME: authenticated
      GOTRUE_EXTERNAL_EMAIL_ENABLED: ${ENABLE_EMAIL_SIGNUP}
      GOTRUE_MAILER_AUTOCONFIRM: ${ENABLE_EMAIL_AUTOCONFIRM}
      GOTRUE_SMTP_ADMIN_EMAIL: ${SMTP_ADMIN_EMAIL}
      GOTRUE_SMTP_HOST: ${SMTP_HOST}
      GOTRUE_SMTP_PORT: ${SMTP_PORT}
      GOTRUE_SMTP_USER: ${SMTP_USER}
      GOTRUE_SMTP_PASS: ${SMTP_PASS}
      GOTRUE_SMTP_SENDER_NAME: ${SMTP_SENDER_NAME}
      GOTRUE_MAILER_URLPATHS_INVITE: ${MAILER_URLPATHS_INVITE}
      GOTRUE_MAILER_URLPATHS_CONFIRMATION: ${MAILER_URLPATHS_CONFIRMATION}
      GOTRUE_MAILER_URLPATHS_RECOVERY: ${MAILER_URLPATHS_RECOVERY}
      GOTRUE_MAILER_URLPATHS_EMAIL_CHANGE: ${MAILER_URLPATHS_EMAIL_CHANGE}
      GOTRUE_EXTERNAL_PHONE_ENABLED: ${ENABLE_PHONE_SIGNUP}
      GOTRUE_SMS_AUTOCONFIRM: ${ENABLE_PHONE_AUTOCONFIRM}
    ports:
      - 9999:9999
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9999/health"]
      timeout: 5s
      interval: 5s
      retries: 3

  rest:
    container_name: supabase-rest
    image: postgrest/postgrest:v11.2.2
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
    environment:
      PGRST_DB_URI: postgresql://authenticator:${POSTGRES_PASSWORD}@db:5432/postgres
      PGRST_DB_SCHEMAS: ${PGRST_DB_SCHEMAS}
      PGRST_DB_ANON_ROLE: anon
      PGRST_JWT_SECRET: ${JWT_SECRET}
      PGRST_DB_USE_LEGACY_GUCS: "false"
    ports:
      - 3000:3000
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/"]
      timeout: 5s
      interval: 5s
      retries: 10

  functions:
    container_name: supabase-functions
    image: supabase/functions-js:v1.6.0
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
    environment:
      JWT_SECRET: ${JWT_SECRET}
      DB_URL: postgresql://postgres:${POSTGRES_PASSWORD}@db:5432/postgres
      VERIFY_JWT: ${FUNCTIONS_VERIFY_JWT}
    volumes:
      - ./volumes/functions:/home/deno/functions
    ports:
      - 9090:9090
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9090"]
      timeout: 10s
      interval: 5s
      retries: 3

  # API Gateway Services
  realtime:
    container_name: supabase-realtime
    image: supabase/realtime:v2.21.0
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
    environment:
      PORT: 4000
      DB_HOST: db
      DB_PORT: 5432
      DB_USER: supabase_admin
      DB_PASSWORD: ${POSTGRES_PASSWORD}
      DB_NAME: postgres
      DB_AFTER_CONNECT_QUERY: 'SET search_path TO _realtime'
      DB_ENC_KEY: supabase_realtime_encryption_key
      API_JWT_SECRET: ${JWT_SECRET}
      FLY_ALLOC_ID: fly123
      FLY_APP_NAME: realtime
      SECRET_KEY_BASE: ${SECRET_KEY_BASE}
      ERL_AFLAGS: -proto_dist inet_tcp
      ENABLE_TAILSCALE: "false"
      DNS_NODES: "''"
    command:
      - "sh"
      - "-c"
      - "sleep 5 && /app/bin/migrate && /app/bin/realtime eval 'Realtime.Release.seeds(Realtime.Repo)' && /app/bin/server"
    ports:
      - 4000:4000
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4000/health"]
      interval: 5s
      timeout: 5s
      retries: 10

  meta:
    container_name: supabase-meta
    image: supabase/postgres-meta:v0.69.0
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
    environment:
      PG_META_PORT: 8080
      PG_META_DB_HOST: db
      PG_META_DB_PORT: 5432
      PG_META_DB_NAME: postgres
      PG_META_DB_USER: supabase_admin
      PG_META_DB_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - 8080:8080
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 5s
      timeout: 5s
      retries: 6

  kong:
    container_name: supabase-kong
    image: kong:2.8.1
    restart: unless-stopped
    ports:
      - 8000:8000/tcp
      - 8443:8443/tcp
    depends_on:
      db:
        condition: service_healthy
      auth:
        condition: service_healthy
      rest:
        condition: service_healthy
      realtime:
        condition: service_healthy
      storage:
        condition: service_healthy
      meta:
        condition: service_healthy
      functions:
        condition: service_healthy
    environment:
      KONG_DATABASE: "off"
      KONG_DECLARATIVE_CONFIG: /var/lib/kong/kong.yml
      KONG_DNS_ORDER: LAST,A,CNAME
      KONG_PLUGINS: request-transformer,cors,key-auth,acl
    volumes:
      - ./volumes/kong/kong.yml:/var/lib/kong/kong.yml:ro,z
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 5s
      timeout: 5s
      retries: 10

  # UI Services
  studio:
    container_name: supabase-studio
    image: supabase/studio:20231025-b91151a
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
      auth:
        condition: service_healthy
      rest:
        condition: service_healthy
      storage:
        condition: service_healthy
      functions:
        condition: service_healthy
      realtime:
        condition: service_healthy
    environment:
      SUPABASE_URL: http://kong:8000
      SUPABASE_ANON_KEY: ${ANON_KEY}
      SUPABASE_SERVICE_ROLE_KEY: ${SERVICE_ROLE_KEY}
    ports:
      - 8081:8081 # Using a different port

  imgproxy:
    container_name: supabase-imgproxy
    image: darthsim/imgproxy:v3.8.0
    restart: unless-stopped
    environment:
      IMGPROXY_BIND: 0.0.0.0:5001
      IMGPROXY_LOCAL_FILES_PATH: /var/lib/storage
      IMGPROXY_USE_ETAG: "true"
      IMGPROXY_ENFORCE_SECURITY: "false" # Set to true in production and configure signature/salt
    volumes:
      - ./volumes/storage:/var/lib/storage:ro
    ports:
      - 5001:5001

  # Performance Services
  pgbouncer:
    container_name: supabase-pgbouncer
    image: supabase/pgbouncer:1.18.0
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
    environment:
      DB_HOST: db
      DB_PORT: 5432
      DB_USER: postgres
      DB_PASSWORD: ${POSTGRES_PASSWORD}
      DB_NAME: postgres
      POOL_MODE: transaction
      MAX_CLIENT_CONN: 1000
      DEFAULT_POOL_SIZE: 50
      AUTH_TYPE: md5
      AUTH_FILE: /etc/pgbouncer/userlist.txt
    volumes:
      - ./volumes/pgbouncer/userlist.txt:/etc/pgbouncer/userlist.txt:ro
    ports:
      - 6543:6543

  vault:
    container_name: supabase-vault
    image: supabase/vault:1.0.0
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
    environment:
      VAULT_DB_CONNECTION: postgresql://postgres:${POSTGRES_PASSWORD}@db:5432/postgres
      VAULT_JWT_SECRET: ${JWT_SECRET}
      VAULT_EXTERNAL_URL: ${API_EXTERNAL_URL}/vault/v1
    ports:
      - 8082:8080 # Using a different port

  # Custom Services
  timescaledb:
    container_name: supabase-timescaledb
    image: timescale/timescaledb-ha:pg15-latest
    restart: unless-stopped
    volumes:
      - ./volumes/timescaledb/data:/var/lib/postgresql/data
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: postgres
    ports:
      - 5435:5432 # Using a different port

  d3_plotter:
    container_name: supabase-d3-plotter
    build: ./app4/d3_plotter # Assuming the Dockerfile is in this directory
    restart: unless-stopped
    depends_on:
      timescaledb:
        condition: service_healthy
    volumes:
      - ./app4/d3_plotter:/app
    ports:
      - 8083:8080 # Using a different port

  tipiservice:
    container_name: supabase-tipiservice
    build: ./supagrok-tipiservice # Assuming the Dockerfile is in this directory
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - ./supagrok-tipiservice:/app
    ports:
      - 7000:7000

  n8n:
    container_name: supabase-n8n
    image: n8nio/n8n:0.211.2
    restart: unless-stopped
    ports:
      - 5678:5678
    environment:
      N8N_BASIC_AUTH_USER: admin
      N8N_BASIC_AUTH_PASSWORD: changeme
      N8N_EDITOR_BASE_URL: http://localhost:5678
      N8N_WEBHOOK_TUNNEL_URL: http://localhost:5678
      N8N_PROTOCOL: http
      N8N_HOST: 0.0.0.0
      N8N_PORT: 5678
      N8N_PUSH_REFRESH_INTERVAL: 2000
      N8N_EXECUTIONS_DATA_DIR: /home/node/n8n/executions
      SUPABASE_URL: http://kong:8000 # Connect to Supabase via Kong gateway
      SUPABASE_ANON_KEY: ${ANON_KEY}
    volumes:
      - n8n-data:/home/node/n8n

volumes:
  n8n-data:
    driver: local
