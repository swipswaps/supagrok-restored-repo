<!-- Begin PATCHED index.html -->
<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8" />
  <title>Supagrok Gaze Calibration (Debug)</title>
  <style>
    html, body {
      margin: 0; padding: 0;
      background: black;
      overflow: hidden;
      color: white;
      font-family: sans-serif;
      height: 100%; width: 100%;
    }
    canvas#overlay {
      position: fixed;
      top: 0; left: 0;
      z-index: 1000;
      pointer-events: none;
    }
    .calib-dot {
      width: 20px; height: 20px;
      background: red; border-radius: 50%;
      position: absolute;
      z-index: 2000; cursor: pointer;
    }
    #main {
      display: none;
      position: absolute;
      top: 50%; left: 50%;
      transform: translate(-50%, -50%);
      z-index: 1500;
    }
  </style>
</head>
<body>
  <canvas id="overlay"></canvas>
  <div id="main">
    <h1>Supagrok BootShield</h1>
    <button onclick="fetch('/launchers/launch_nobara.sh')">Launch OS</button>
  </div>

  <script src="https://webgazer.cs.brown.edu/webgazer.js"></script>
  <script>
    const canvas = document.getElementById('overlay');
    const ctx = canvas.getContext('2d');
    let trail = [], log = [], lastGaze = null;

    function resizeCanvas() {
      canvas.width = window.innerWidth;
      canvas.height = window.innerHeight;
    }
    window.addEventListener('resize', resizeCanvas);
    resizeCanvas();

    const calibrationPoints = [
      [0.1, 0.1], [0.5, 0.1], [0.9, 0.1],
      [0.1, 0.5], [0.5, 0.5], [0.9, 0.5],
      [0.1, 0.9], [0.5, 0.9], [0.9, 0.9]
    ];
    let currentDot = 0;

    function placeCalibrationDot([xRatio, yRatio]) {
      const dot = document.createElement('div');
      dot.className = 'calib-dot';
      dot.style.left = `${window.innerWidth * xRatio - 10}px`;
      dot.style.top = `${window.innerHeight * yRatio - 10}px`;
      dot.onclick = () => {
        const x = dot.offsetLeft + 10;
        const y = dot.offsetTop + 10;
        if (lastGaze) {
          const dx = lastGaze.x - x;
          const dy = lastGaze.y - y;
          const dist = Math.sqrt(dx * dx + dy * dy);
          log.push({ t: Date.now(), x, y, gx: lastGaze.x, gy: lastGaze.y, dist });
        }
        webgazer.recordScreenPosition(x, y, 'click');
        dot.remove();
        currentDot++;
        if (currentDot < calibrationPoints.length) {
          placeCalibrationDot(calibrationPoints[currentDot]);
        } else {
          finishCalibration();
        }
      };
      document.body.appendChild(dot);
    }

    function finishCalibration() {
      console.log("‚úÖ Calibration complete");
      webgazer.saveData(); // üîê persist model
      document.getElementById('main').style.display = 'block';
    }

    webgazer.setRegression('ridge'); // üëÅ stabilize model
    webgazer.params.storingPoints = true;
    webgazer.params.useMouseAccuracy = false; // ‚ùå no fallback

    webgazer.setGazeListener((data) => {
      if (!data) return;
      lastGaze = data;
      const now = Date.now();
      trail.push({ x: data.x, y: data.y, t: now });
      trail = trail.filter(p => now - p.t < 3000);

      ctx.clearRect(0, 0, canvas.width, canvas.height);
      for (const p of trail) {
        const alpha = 1 - (now - p.t) / 3000;
        ctx.beginPath();
        ctx.arc(p.x, p.y, 6, 0, 2 * Math.PI);
        ctx.fillStyle = `rgba(0,255,0,${alpha})`;
        ctx.fill();
      }
    });

    webgazer.begin()
      .then(() => {
        console.log("üß† WebGazer ready");
        placeCalibrationDot(calibrationPoints[currentDot]);
        if (!document.getElementById("webgazerVideoFeed")) {
          const v = document.createElement("video");
          v.id = "webgazerVideoFeed";
          document.body.appendChild(v);
        }
      });

    window.addEventListener('keydown', (e) => {
      if (e.key === 'e') {
        const blob = new Blob([JSON.stringify(log, null, 2)], { type: 'application/json' });
        const a = document.createElement('a');
        a.href = URL.createObjectURL(blob);
        a.download = `gaze_log_${Date.now()}.json`;
        a.click();
      }
      if (e.key === 'r') {
        currentDot = 0;
        document.querySelectorAll('.calib-dot').forEach(dot => dot.remove());
        placeCalibrationDot(calibrationPoints[currentDot]);
        console.log("üîÅ Restarting calibration");
      }
    });
  </script>
</body>
</html>
<!-- End PATCHED index.html -->
