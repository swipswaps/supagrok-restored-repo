<!-- PRF‑CALIB‑2025‑04‑30‑CALIB‑FIX‑G2 -->
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <title>Supagrok Gaze Overlay</title>
  <style>
    html, body {
      margin: 0; padding: 0; background: black; color: white;
      overflow: hidden; font-family: monospace; height: 100%; width: 100%;
    }
    #overlay {
      position: fixed; top: 0; left: 0; z-index: 1000; pointer-events: none;
    }
    .calib-dot {
      width: 20px; height: 20px; background: red; border-radius: 50%;
      position: absolute; z-index: 2000; cursor: pointer;
    }
    .status-log {
      position: fixed; bottom: 0; left: 0; right: 0;
      background: black; color: lime; font: 16px monospace;
      padding: 5px; overflow-y: auto; z-index: 9999; max-height: 25vh;
    }
    #calibModal {
      position: fixed; top: 20vh; left: 30vw; width: 40vw; height: auto;
      border: 4px solid lime; background: black; color: white; padding: 20px;
      z-index: 3000; font-size: 20px; display: flex; flex-direction: column;
      justify-content: center; align-items: center;
    }
    #calibModal button {
      font-size: 20px; margin: 10px; padding: 10px 30px; background: #222;
      color: white; border: 2px solid #555; cursor: pointer;
    }
  </style>
</head>
<body>

<canvas id="overlay" width="640" height="480"></canvas>
<div id="statusLog" class="status-log">📡 Waiting for events...</div>

<div id="calibModal">
  <div><b>Calibration Options</b></div>
  <button onclick="setTrackingMode(1)">Mode 1 (Haar Eye)</button>
  <button onclick="setTrackingMode(2)">Mode 2 (DNN Face)</button>
  <button onclick="setTrackingMode(3)">Mode 3 (Facial Mesh)</button>
  <button onclick="closeCalib()">Close</button>
</div>

<div id="webgazerGazeDot" style="display: block; position: fixed; z-index: 99999; left: -5px; top: -5px; background: red; border-radius: 100%; opacity: 0.7; width: 10px; height: 10px;"></div>

<script src="https://webgazer.cs.brown.edu/webgazer.js"></script>
<script>
let trail = [], smoothed = {x: 0, y: 0};
let ws;

function logStatus(msg) {
  const div = document.getElementById("statusLog");
  const line = document.createElement("div");
  line.textContent = msg;
  div.appendChild(line);
  console.log("[SYS]", msg);
}

function drawTrail() {
  const canvas = document.getElementById('overlay');
  const ctx = canvas.getContext('2d');
  ctx.clearRect(0, 0, canvas.width, canvas.height);
  const now = Date.now();
  for (const p of trail.filter(p => now - p.t < 3000)) {
    const a = 1 - (now - p.t) / 3000;
    ctx.beginPath();
    ctx.arc(p.x, p.y, 6, 0, 2 * Math.PI);
    ctx.fillStyle = `rgba(0,255,0,${a})`;
    ctx.fill();
  }
}

function closeCalib() {
  document.getElementById("calibModal").style.display = "none";
  logStatus("✅ Calibration window closed.");
}

function setTrackingMode(mode) {
  logStatus(`🔁 Switched to Mode ${mode}`);
  // Add optional backend signal logic here
  closeCalib();
}

function initWebGazer() {
  webgazer.setGazeListener(data => {
    if (!data) return;
    smoothed.x = 0.85 * smoothed.x + 0.15 * data.x;
    smoothed.y = 0.85 * smoothed.y + 0.15 * data.y;
    trail.push({x: smoothed.x, y: smoothed.y, t: Date.now()});
    drawTrail();
    const dot = document.getElementById("webgazerGazeDot");
    dot.style.left = `${smoothed.x - 5}px`;
    dot.style.top = `${smoothed.y - 5}px`;
  });

  webgazer.begin().then(() => {
    logStatus("🧠 WebGazer loaded.");
  }).catch(e => logStatus("❌ WebGazer init error: " + e));
}

function initSocket() {
  try {
    ws = new WebSocket("ws://localhost:8765");
    ws.onopen = () => logStatus("🟢 WebSocket connected.");
    ws.onerror = e => logStatus("❌ WS error: " + (e.message || "undefined"));
  } catch (e) {
    logStatus("⚠ WebSocket failed: " + e);
  }
}

window.onload = () => {
  logStatus("✅ Initialized overlay environment...");
  initSocket();
  initWebGazer();
};
</script>

</body>
</html>
