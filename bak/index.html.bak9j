<!-- PRF‚ÄëCALIB‚Äë2025‚Äë04‚Äë30‚ÄëOVERLAY‚ÄëLOGGER‚ÄëFIX -->
<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8" />
  <title>Supagrok Gaze Calibration</title>
  <style>
    html, body {
      margin: 0; padding: 0;
      background: black;
      overflow: hidden;
      color: white;
      font-family: sans-serif;
      height: 100%; width: 100%;
    }
    canvas#overlay {
      position: fixed;
      top: 0; left: 0;
      z-index: 1000;
      pointer-events: none;
    }
    video#webgazerVideoFeed {
      position: fixed;
      bottom: 10px; right: 10px;
      width: 240px;
      height: auto;
      z-index: 500;
      border: 2px solid white;
    }
    .calib-dot {
      width: 20px; height: 20px;
      background: red; border-radius: 50%;
      position: absolute; z-index: 2000;
      cursor: pointer;
    }
    #main {
      display: none;
      position: absolute;
      top: 50%; left: 50%;
      transform: translate(-50%, -50%);
      z-index: 1500;
    }
    #statusLog {
      position: fixed;
      bottom: 0;
      left: 0;
      right: 0;
      max-height: 30vh;
      background: black;
      color: lime;
      font: 12px monospace;
      overflow: auto;
      padding: 4px;
      z-index: 9999;
    }
  </style>
</head>
<body>
  <canvas id="overlay"></canvas>
  <div id="main">
    <h1>Supagrok BootShield</h1>
    <button onclick="fetch('/launchers/launch_nobara.sh')">Launch OS</button>
  </div>
  <div id="statusLog"></div>

  <script src="https://webgazer.cs.brown.edu/webgazer.js"></script>
  <script>
    const canvas = document.getElementById('overlay');
    const ctx = canvas.getContext('2d');
    const log = [];
    let trail = [];
    let lastGaze = null;
    let currentDot = 0;
    const invertX = true;  // Flip if movement feels reversed
    const smoothing = 0.2;
    let smoothed = { x: 0, y: 0 };

    const calibrationPoints = [
      [0.1, 0.1], [0.5, 0.1], [0.9, 0.1],
      [0.1, 0.5], [0.5, 0.5], [0.9, 0.5],
      [0.1, 0.9], [0.5, 0.9], [0.9, 0.9]
    ];

    function resizeCanvas() {
      canvas.width = window.innerWidth;
      canvas.height = window.innerHeight;
    }

    window.addEventListener('resize', resizeCanvas);
    resizeCanvas();

    function logStatus(msg) {
      console.log(msg);
      const entry = document.createElement("div");
      entry.textContent = msg;
      document.getElementById("statusLog").appendChild(entry);
      document.getElementById("statusLog").scrollTop = 99999;
    }

    function placeCalibrationDot([xRatio, yRatio]) {
      const dot = document.createElement('div');
      dot.className = 'calib-dot';
      dot.style.left = `${window.innerWidth * xRatio - 10}px`;
      dot.style.top = `${window.innerHeight * yRatio - 10}px`;
      dot.onclick = async () => {
        const tx = dot.offsetLeft + 10;
        const ty = dot.offsetTop + 10;
        const pred = await webgazer.getCurrentPrediction();
        if (pred) {
          const dx = pred.x - tx;
          const dy = pred.y - ty;
          const dist = Math.sqrt(dx * dx + dy * dy);
          log.push({ timestamp: Date.now(), targetX: tx, targetY: ty, gazeX: pred.x, gazeY: pred.y, dist });
          logStatus(`üìå Logged point ${log.length}: Œî${Math.round(dist)}px`);
        } else {
          logStatus("‚ö†Ô∏è No prediction available at click.");
        }
        webgazer.recordScreenPosition(tx, ty, 'click');
        dot.remove();
        currentDot++;
        if (currentDot < calibrationPoints.length) {
          placeCalibrationDot(calibrationPoints[currentDot]);
        } else {
          finishCalibration();
        }
      };
      document.body.appendChild(dot);
    }

    function finishCalibration() {
      logStatus("‚úÖ Calibration complete");
      document.getElementById('main').style.display = 'block';
      webgazer.saveData().then(() => {
        logStatus("üíæ Model saved.");
      });
    }

    function drawTrail() {
      ctx.clearRect(0, 0, canvas.width, canvas.height);
      const now = Date.now();
      trail = trail.filter(p => now - p.t < 3000);
      for (const p of trail) {
        const alpha = 1 - (now - p.t) / 3000;
        ctx.beginPath();
        ctx.arc(p.x, p.y, 6, 0, 2 * Math.PI);
        ctx.fillStyle = `rgba(0,255,0,${alpha})`;
        ctx.fill();
      }
    }

    webgazer.setRegression('ridge');
    webgazer.params.storingPoints = true;
    webgazer.params.useMouseAccuracy = false;

    webgazer.setGazeListener(data => {
      if (!data) return;
      lastGaze = data;
      const gx = invertX ? (window.innerWidth - data.x) : data.x;
      smoothed.x = smoothed.x * (1 - smoothing) + gx * smoothing;
      smoothed.y = smoothed.y * (1 - smoothing) + data.y * smoothing;
      trail.push({ x: smoothed.x, y: smoothed.y, t: Date.now() });
      drawTrail();
    });

    webgazer.begin()
      .then(() => {
        webgazer.showVideoPreview(true).showFaceOverlay(true).showPredictionPoints(true);
        logStatus("üß† WebGazer initialized with overlays.");
        placeCalibrationDot(calibrationPoints[currentDot]);
      })
      .catch(err => logStatus("‚ùå WebGazer error: " + err));

    window.addEventListener('keydown', (e) => {
      if (e.key === 'e') {
        const blob = new Blob([JSON.stringify(log, null, 2)], { type: 'application/json' });
        const a = document.createElement('a');
        a.href = URL.createObjectURL(blob);
        a.download = `gaze_log_${Date.now()}.json`;
        a.click();
        logStatus("üì§ Exported log.");
      }
      if (e.key === 'r') {
        currentDot = 0;
        document.querySelectorAll('.calib-dot').forEach(dot => dot.remove());
        placeCalibrationDot(calibrationPoints[currentDot]);
        logStatus("üîÅ Restarted calibration.");
      }
      if (e.key === 'd') {
        console.table(log.slice(-5));
        logStatus("üìä Displayed last 5 log entries in DevTools.");
      }
    });

    document.body.focus();
  </script>
</body>
</html>
