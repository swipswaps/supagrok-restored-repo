<!-- PRF‚ÄëCALIB-2025‚Äë04‚Äë30-INTEGRATION-KALMAN-UI -->
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>Supagrok Gaze Tracker</title>
  <style>
    html, body { margin: 0; padding: 0; background: black; color: white; font-family: monospace; height: 100%; overflow: hidden; }
    canvas#overlay { position: absolute; top: 0; left: 0; z-index: 100; pointer-events: none; }
    .statuslog { position: fixed; bottom: 0; left: 0; width: 100%; background: black; color: lime; font: 14px monospace; padding: 4px; z-index: 10000; }
    .calib-dot { width: 20px; height: 20px; background: red; border-radius: 50%; position: absolute; z-index: 1000; cursor: pointer; }
    .calib-modal { position: fixed; top: 30%; left: 35%; background: black; color: white; border: 3px solid lime; padding: 20px; z-index: 9999; display: block; }
    .calib-modal button { font-size: 20px; margin: 10px; padding: 10px; cursor: pointer; }
  </style>
</head>
<body>
<canvas id="overlay" width="640" height="480"></canvas>
<div id="modal" class="calib-modal">
  <h2>Calibration Options</h2>
  <button onclick="selectMode(1)">Mode 1 (Haar Eye)</button>
  <button onclick="selectMode(2)">Mode 2 (DNN Face)</button>
  <button onclick="selectMode(3)">Mode 3 (Facial Mesh)</button>
  <button onclick="closeModal()">Close</button>
</div>
<div id="statuslogs" class="statuslog">[‚è≥] Waiting for events...</div>
<script src="https://webgazer.cs.brown.edu/webgazer.js"></script>
<script>
const canvas = document.getElementById('overlay');
const ctx = canvas.getContext('2d');
const trail = [], logs = [];
let lastGaze = null;
let kalmanX = new KalmanFilter(), kalmanY = new KalmanFilter();

// Kalman Filter Class (simple 1D)
function KalmanFilter() {
  let A = 1, H = 1, Q = 0.01, R = 1, P = 1, x = 0;
  this.filter = function(z) {
    x = A * x;
    P = A * P * A + Q;
    let K = P * H / (H * P * H + R);
    x = x + K * (z - H * x);
    P = (1 - K * H) * P;
    return x;
  };
}

function logStatus(msg) {
  const d = document.createElement("div");
  d.textContent = `[${new Date().toLocaleTimeString()}] ${msg}`;
  document.getElementById("statuslogs").appendChild(d);
}

function drawTrail() {
  ctx.clearRect(0, 0, canvas.width, canvas.height);
  const now = Date.now();
  for (const p of trail.filter(p => now - p.t < 3000)) {
    const a = 1 - (now - p.t) / 3000;
    ctx.beginPath();
    ctx.arc(p.x, p.y, 6, 0, 2 * Math.PI);
    ctx.fillStyle = `rgba(0,255,0,${a})`;
    ctx.fill();
  }
}

function processGaze(data) {
  if (!data) return;
  const x = kalmanX.filter(data.x);
  const y = kalmanY.filter(data.y);
  lastGaze = { x, y, t: Date.now() };
  trail.push(lastGaze);
  drawTrail();
}

function sendPrediction(pred) {
  if (pred) logs.push(pred);
}

function placeDot(xr, yr) {
  const dot = document.createElement("div");
  dot.className = "calib-dot";
  dot.style.left = `${window.innerWidth * xr - 10}px`;
  dot.style.top = `${window.innerHeight * yr - 10}px`;
  dot.onclick = async () => {
    const pred = await webgazer.getCurrentPrediction();
    sendPrediction(pred);
    dot.remove();
    currentDot++;
    if (currentDot < dots.length) placeDot(...dots[currentDot]);
    else closeModal(true);
  };
  document.body.appendChild(dot);
}

let currentDot = 0;
const dots = [[0.1,0.1],[0.9,0.1],[0.5,0.5],[0.1,0.9],[0.9,0.9]];

function closeModal(success) {
  document.getElementById("modal").style.display = "none";
  if (success) logStatus("‚úÖ Calibration closed.");
}

function selectMode(i) {
  logStatus(`üîÅ Switched to Mode ${i}`);
  closeModal();
}

logStatus("üì° Initializing WebGazer...");
webgazer.setGazeListener(processGaze).begin().then(() => {
  logStatus("üß† WebGazer initialized");
  placeDot(...dots[currentDot]);
}).catch(e => {
  logStatus("‚ùå WebGazer failed to initialize");
});
</script>
</body>
</html>
