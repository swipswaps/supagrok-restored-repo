<!-- PRF‚ÄëCALIB‚Äë2025‚Äë04‚Äë30‚ÄëCALIB‚ÄëFIX‚ÄëG1 -->
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Supagrok Gaze Overlay</title>
  <style>
    html, body {
      margin: 0; padding: 0; height: 100%; width: 100%;
      background: black; color: white; font-family: monospace; overflow: hidden;
    }
    canvas#overlay {
      position: fixed; top: 0; left: 0; z-index: 1000; pointer-events: none;
    }
    .calib-dot {
      width: 20px; height: 20px; background: red; border-radius: 50%;
      position: absolute; z-index: 3000; cursor: pointer;
    }
    #statusLog {
      position: fixed; bottom: 0; left: 0; right: 0; max-height: 30vh;
      background: rgba(0,0,0,0.8); color: lime; font-size: 13px;
      overflow-y: auto; z-index: 9999; padding: 5px;
    }
  </style>
</head>
<body>
<canvas id="overlay"></canvas>
<div id="statusLog"></div>

<script src="https://webgazer.cs.brown.edu/webgazer.js"></script>
<script>
document.addEventListener("DOMContentLoaded", () => {
  const canvas = document.getElementById("overlay");
  const ctx = canvas.getContext("2d");
  const logDiv = document.getElementById("statusLog");
  const trail = [], log = [];
  let ws, currentDot = 0, smoothed = { x: 0, y: 0 };
  const calibrationPoints = [[0.1,0.1],[0.9,0.1],[0.5,0.5],[0.1,0.9],[0.9,0.9]];

  function resizeCanvas() {
    canvas.width = window.innerWidth;
    canvas.height = window.innerHeight;
  }

  function logStatus(msg) {
    console.log(msg);
    const d = document.createElement("div");
    d.textContent = msg;
    logDiv.appendChild(d);
    logDiv.scrollTop = 999999;
  }

  function drawTrail() {
    ctx.clearRect(0, 0, canvas.width, canvas.height);
    const now = Date.now();
    for (const p of trail.filter(p => now - p.t < 3000)) {
      const alpha = 1 - (now - p.t) / 3000;
      ctx.beginPath();
      ctx.arc(p.x, p.y, 6, 0, 2 * Math.PI);
      ctx.fillStyle = `rgba(0,255,0,${alpha})`;
      ctx.fill();
    }
  }

  function sendGaze(data) {
    if (ws?.readyState === WebSocket.OPEN) {
      ws.send(JSON.stringify(data));
    }
  }

  function placeDot([xr, yr]) {
    const dot = document.createElement("div");
    dot.className = "calib-dot";
    dot.style.left = `${window.innerWidth * xr - 10}px`;
    dot.style.top = `${window.innerHeight * yr - 10}px`;
    dot.onclick = async () => {
      try {
        const pred = await webgazer.getCurrentPrediction();
        if (pred) {
          logStatus(`üìç Dot #${currentDot + 1} clicked: Œîx=${Math.round(pred.x)} Œîy=${Math.round(pred.y)}`);
          log.push(pred);
          sendGaze(pred);
        } else {
          logStatus("‚ö† No prediction available.");
        }
      } catch (e) {
        logStatus("‚ö† Error during prediction: " + e.message);
      }
      dot.remove();
      if (++currentDot < calibrationPoints.length) placeDot(calibrationPoints[currentDot]);
      else logStatus("‚úÖ Calibration complete.");
    };
    document.body.appendChild(dot);
  }

  resizeCanvas();
  window.addEventListener("resize", resizeCanvas);

  try {
    ws = new WebSocket("ws://localhost:8765");
    ws.onopen = () => logStatus("üü¢ WebSocket connected.");
    ws.onerror = e => logStatus("‚ùå WS error: " + (e.message || "undefined"));
  } catch (e) {
    logStatus("‚ùå WS init failed: " + e.message);
  }

  try {
    webgazer.setRegression('ridge');
    webgazer.setGazeListener(data => {
      if (!data) return;
      smoothed.x = 0.8 * smoothed.x + 0.2 * data.x;
      smoothed.y = 0.8 * smoothed.y + 0.2 * data.y;
      trail.push({x: smoothed.x, y: smoothed.y, t: Date.now()});
      drawTrail();
    });
    webgazer.begin().then(() => {
      logStatus("üß† WebGazer loaded.");
      placeDot(calibrationPoints[currentDot]);
    }).catch(e => logStatus("‚ùå WebGazer failed: " + e));
  } catch (err) {
    logStatus("‚ùå WebGazer crash: " + err.message);
  }
});
</script>
</body>
</html>
