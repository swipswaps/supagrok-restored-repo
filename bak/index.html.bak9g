<!-- PRF‑CALIB‑2025‑04‑30‑FIX‑INTERACTION‑BLOCK -->
<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <title>Supagrok Gaze Interactive Fix</title>
  <style>
    html, body { margin:0; padding:0; background:black; height:100%; width:100%; overflow:hidden; color:white; font-family:sans-serif; }
    canvas#overlay { position:fixed; top:0; left:0; z-index:1000; pointer-events:none; }
    .calib-dot { width:20px; height:20px; background:red; border-radius:50%; position:absolute; z-index:2000; cursor:pointer; }
    #main { display:none; position:absolute; top:50%; left:50%; transform:translate(-50%,-50%); z-index:1500; }
  </style>
</head>
<body tabindex="0">
<canvas id="overlay"></canvas>
<div id="main">
  <h1>Supagrok BootShield</h1>
  <button onclick="fetch('/launchers/launch_nobara.sh')">Launch OS</button>
</div>

<script src="https://webgazer.cs.brown.edu/webgazer.js"></script>
<script>
  const canvas = document.getElementById('overlay');
  const ctx = canvas.getContext('2d');
  let trail = [], log = [], currentDot = 0, lastGaze = null;
  let smoothed = { x: 0, y: 0 }, smoothing = 0.2;

  const calibrationPoints = [
    [0.1, 0.1], [0.5, 0.1], [0.9, 0.1],
    [0.1, 0.5], [0.5, 0.5], [0.9, 0.5],
    [0.1, 0.9], [0.5, 0.9], [0.9, 0.9]
  ];

  function resizeCanvas() {
    canvas.width = window.innerWidth;
    canvas.height = window.innerHeight;
  }

  window.addEventListener('resize', resizeCanvas);
  resizeCanvas();

  function placeCalibrationDot([xRatio, yRatio]) {
    const dot = document.createElement('div');
    dot.className = 'calib-dot';
    dot.style.left = `${window.innerWidth * xRatio - 10}px`;
    dot.style.top = `${window.innerHeight * yRatio - 10}px`;
    dot.onclick = async () => {
      const tx = dot.offsetLeft + 10, ty = dot.offsetTop + 10;
      const pred = await webgazer.getCurrentPrediction();
      if (pred) {
        const dx = pred.x - tx, dy = pred.y - ty;
        const dist = Math.sqrt(dx * dx + dy * dy);
        log.push({ t: Date.now(), tx, ty, gx: pred.x, gy: pred.y, dist, model: "ridge" });
        console.table(log.slice(-3));
      }
      webgazer.recordScreenPosition(tx, ty, "click");
      dot.remove();
      currentDot++;
      if (currentDot < calibrationPoints.length) placeCalibrationDot(calibrationPoints[currentDot]);
      else finishCalibration();
    };
    document.body.appendChild(dot);
  }

  function finishCalibration() {
    console.log("✅ Calibration complete");
    document.getElementById("main").style.display = "block";
    webgazer.saveData().then(() => {
      console.log("📤 Model + log saved:", log.length);
    });
  }

  function drawTrail() {
    ctx.clearRect(0, 0, canvas.width, canvas.height);
    const now = Date.now();
    trail = trail.filter(p => now - p.t < 3000);
    for (const p of trail) {
      const alpha = 1 - (now - p.t) / 3000;
      ctx.beginPath();
      ctx.arc(p.x, p.y, 6, 0, 2 * Math.PI);
      ctx.fillStyle = `rgba(0,255,0,${alpha})`;
      ctx.fill();
    }
  }

  webgazer.setRegression("ridge");
  webgazer.params.storingPoints = true;
  webgazer.params.useMouseAccuracy = false;

  webgazer.setGazeListener((data) => {
    if (!data) return;
    lastGaze = data;
    smoothed.x = smoothed.x * (1 - smoothing) + data.x * smoothing;
    smoothed.y = smoothed.y * (1 - smoothing) + data.y * smoothing;
    trail.push({ x: smoothed.x, y: smoothed.y, t: Date.now() });
    drawTrail();
  });

  webgazer.begin()
    .showPredictionPoints(true)
    .showVideoPreview(true)
    .showFaceOverlay(true)
    .then(() => {
      console.log("🧠 WebGazer started");
      placeCalibrationDot(calibrationPoints[currentDot]);
    });

  // 🔁 Keyboard commands
  window.addEventListener('keydown', (e) => {
    if (e.key === 'r') {
      console.log("🔁 Resetting calibration");
      currentDot = 0;
      document.querySelectorAll('.calib-dot').forEach(dot => dot.remove());
      placeCalibrationDot(calibrationPoints[currentDot]);
    }
    if (e.key === 'e') {
      const blob = new Blob([JSON.stringify(log, null, 2)], { type: "application/json" });
      const a = document.createElement("a");
      a.href = URL.createObjectURL(blob);
      a.download = `gaze_log_${Date.now()}.json`;
      a.click();
      console.log("📤 Log exported");
    }
    if (e.key === 'd') {
      console.table(log.slice(-5));
    }
  });

  // ✅ Force document focus to capture keypresses
  document.body.focus();
</script>
</body>
</html>
