
<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <title>Supagrok Gaze Calibration</title>
  <style>
html, body {
  margin: 0; padding: 0; background: black; color: white;
  overflow: hidden; font-family: sans-serif; height: 100%; width: 100%;
}
canvas#overlay {
  position: fixed; top: 0; left: 0; z-index: 1000; pointer-events: none;
}
.calib-dot {
  width: 20px; height: 20px; background: red; border-radius: 50%;
  position: absolute; z-index: 2000; cursor: pointer;
}
#statusLog {
  position: fixed; bottom: 0; left: 0; right: 0;
  background: black; color: lime; font: 12px monospace;
  padding: 5px; overflow-y: auto; z-index: 9999; max-height: 25vh;
}
</style>
</head>
<body>
<canvas id="overlay"></canvas>
<div id="statusLog"></div>
<script src="https://webgazer.cs.brown.edu/webgazer.js"></script>
<script>
document.addEventListener("DOMContentLoaded", function () {
  const canvas = document.getElementById('overlay');
  const ctx = canvas.getContext('2d');
  const trail = [], log = [];
  let smoothed = { x: 0, y: 0 };
  let currentDot = 0;
  let ws = new WebSocket("ws://localhost:8765");
  ws.onopen = () => logStatus("üü¢ WebSocket connected.");
  ws.onerror = e => logStatus("‚ùå WS error: " + e.message);

  function logStatus(msg) {
    const d = document.createElement("div");
    d.textContent = msg;
    document.getElementById("statusLog").appendChild(d);
  }

  function drawTrail() {
    ctx.clearRect(0, 0, canvas.width, canvas.height);
    const now = Date.now();
    for (const p of trail.filter(p => now - p.t < 3000)) {
      const a = 1 - (now - p.t) / 3000;
      ctx.beginPath(); ctx.arc(p.x, p.y, 6, 0, 2 * Math.PI);
      ctx.fillStyle = `rgba(0,255,0,${a})`; ctx.fill();
    }
  }

  function sendGazeToPython(data) {
    if (ws.readyState === WebSocket.OPEN) {
      ws.send(JSON.stringify(data));
    }
  }

  function placeDot(xr, yr) {
    const dot = document.createElement('div');
    dot.className = 'calib-dot';
    dot.style.left = `${window.innerWidth * xr - 10}px`;
    dot.style.top = `${window.innerHeight * yr - 10}px`;
    dot.onclick = async () => {
      try {
        const pred = await webgazer.getCurrentPrediction();
        if (pred) {
          sendGazeToPython(pred);
          log.push(pred);
        }
      } catch (e) { logStatus("‚ö† Prediction failed."); }
      dot.remove();
      currentDot++;
      if (currentDot < 5) placeDot(...dots[currentDot]);
    };
    document.body.appendChild(dot);
  }

  const dots = [[0.1,0.1],[0.9,0.1],[0.5,0.5],[0.1,0.9],[0.9,0.9]];
  webgazer.setRegression('ridge');
  webgazer.setGazeListener(data => {
    if (!data) return;
    smoothed.x = 0.8 * smoothed.x + 0.2 * data.x;
    smoothed.y = 0.8 * smoothed.y + 0.2 * data.y;
    trail.push({x: smoothed.x, y: smoothed.y, t: Date.now()});
    drawTrail();
  });

  webgazer.begin().then(() => {
    logStatus("üß† WebGazer loaded.");
    placeDot(...dots[currentDot]);
  }).catch(e => logStatus("‚ùå WebGazer init failed: " + e));
});
</script>
</body>
</html>
